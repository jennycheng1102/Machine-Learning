import numpy as np
#cvxopt is a package designed for convex optimization
#use cvxopt to create matrix,solve quadratic programming
from cvxopt import matrix, solvers
import random
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt,erf
import pandas as pd
import itertools 
import csv
import pandas as pd
import scipy.stats
#convert categorical graduation rate 'Y' and 'N' to numerical #
def YN_to_num(x):
    if (x == 'Y'):
        return 1
    if (x == 'N'):
        return 0
#assign numerical values to race according to extent of skin colors       
def Race_to_num(x):
    if (x == 'White'):
        return 1
    if (x == 'Asian'):
        return 3
    if (x == 'Hispanic/Latino'):
        return 2
    if (x == 'Black/African American'):
        return 4
    if (x == 'Not Specified'):
        return 2.5
    if (x == 'Non Resident Alien'):
        return 2.5
    if ( x == 'Two or more races'):
        return 2.5
    if ( x == 'Cape Verdean'):
        return 2 


def Housing_to_num(x):
    if (x == 'Dorm'):
        return 2
    if (x == 'Commuter'):
        return 1 
        
def FA_to_num(x):
    if ( x == 'Y'):
        return 1
    if ( x == 'N'):
        return 2
        
def Work_to_num(x):
    if (x == 'Y'):
        return 1
    if (x == 'N'):
        return 2 
#Because living on-campus or off-campus is partly related with study full-time or part-time         
def WorkHousing_to_num(x):

    if (x[20] == 'N') & (x[12] == 'Commuter'):
        return 1
    if (x[20] == 'N') & (x[12] == 'Dorm'):
        return 2   
    if (x[20] == 'Y') & (x[12] == 'Commuter'):
        return 3          
    if (x[20] == 'Y') & (x[12] == 'Dorm'):
        return 4   
     
edudf = pd.read_csv('/Users/Jennycheng/college_graduation_data.csv')

fout1 = open('/Users/kavithachandra/desktop/edupycode/lin_lse_0.95_0.33n.out', 'w')
fout0 = open('/Users/kavithachandra/desktop/edupycode/pvlin0_0.95_0.33n.out', 'w')
#check feature numbers
print(edudf.columns)
print edudf.dtypes
#print edudf.describe()


numcols = [ column for column in edudf.columns if edudf[column].dtype == 'float64' ] 
#extract engineering college records
busdf = edudf.loc[edudf['COLLEGE'] == 'Engineering']
#put row number into 'ro',column number into columns
[ro,co] = busdf.shape

#Graduated Students 
#busdfGY = busdf.loc[busdf['DEGREE COMPLETION-6YR'] == 'Y']



# operate with features : ETHNICITY, HS GPA, SAT-MATH, SAT-VERB, HOUSING, FA APPLICANT, WORK, FALL GPA, SPRING GPA
NF = 10
XF = np.zeros((k,NF))
apply Race_to_num to feature 'ethnicity'
XF[:,0] = busdf['ETHNICITY'].apply(Race_to_num)
XF[:,1] = busdf['HS GPA']
XF[:,2] = busdf['SAT-MATH']
XF[:,3] = busdf['SAT-VERB']
XF[:,4] = busdf.apply(WorkHousing_to_num,axis=1) 
XF[:,5] = busdf['SPRING GPA'] 
XF[:,9] = busdf['WORK'].apply(Work_to_num)
XF[:,6] = busdf['HOUSING'].apply(Housing_to_num)
XF[:,7] = busdf['FA APPLICANT'].apply(FA_to_num) 
XF[:,8] = busdf['FALL GPA']


features = ['ETHN', 'HSGPA', 'SMATH', 'SVERB', 'WH', 'SP']


#Outcome: Graduation : Y/N  :  convert to 1 and 0 
Y = np.zeros((k,1))  
Ys = np.zeros((k,1))
Ys[:,0] = busdf['DEGREE COMPLETION-6YR'].apply(YN_to_num)
#choose variance=p(1-p)=0.25 because of binomial distribution
var = 0.25
mu,sigma = 0, np.sqrt(var)
print 'sigma = ', sigma
Y[:,0] = Ys[:,0] 
Ymin = min(Ys)
Ymax = max(Ys)
My = abs(Ymax-Ymin)
print 'bound=',My

# pick random query point  and transform all data so that query is at origin
kq = 13
kq = 16
kq=35
kq=9

flist =  list(itertools.combinations(range(6),3))
flistlen = len(flist)
# define feature vector 
N = 3
X = np.zeros((k,N))
Xs = np.zeros((k,N))

for kq in range(0,k):
    print 'query:',kq
    err = np.zeros((flistlen,1))
    fest = np.zeros((flistlen,1))
    obj = np.zeros((flistlen,1))
    ftrue = np.zeros((flistlen,1))
    nsamp = np.zeros((flistlen,1))
    fmod = np.array(range(flistlen*N),dtype=str).reshape(flistlen,N)
    fqval = np.zeros((flistlen,N))
    LSEest = np.zeros((flistlen,1))
    LSEerr = np.zeros((flistlen,1))

    imodindx = -1

    for imod in flist:
        indx = -1
        fnames = []
        querval=[]
        imodindx = imodindx + 1
        for j in imod:
            fnames.append(features[j])
            querval.append(XF[kq,j]) #kq query
            indx = indx + 1
    #       print j, indx
    #only focus on the first 6 fetures
            Xs[:,indx] = XF[:,j]
    
        X = Xs         
        meanX = np.zeros((1,N))
        stdX = np.zeros((1,N))
    # Find Range of Variables 
    
        Xmin = np.zeros((1,N))
        Xmax = np.zeros((1,N))

        for j in range(N):
            meanX[0,j] = np.mean( X[:,j] )
            stdX[0,j] = np.std(X[:,j] ) 
    
    # center the features 
        
        for j in range(N):
            X[:,j] = (X[:,j] - meanX[0,j])/stdX[0,j]
            
        xq = np.zeros((1,N)) 
        xq = X[kq,:] 
        xn = np.zeros((k,N)) 
    # Center about the query point ,substract query point from every record
        xn[:,0:N-1] = X[:,0:N-1] - xq[0:N-1]
        
    #get the bound of every feature[0,j]
        for j in range(N):
            Xmin[0,j] = min(xn[:,j])
            Xmax[0,j] = max(xn[:,j]) 
    
        r = np.zeros((1,N))
    
        for j in range(N):
            r[0,j] = Xmax[0,j]-Xmin[0,j]
    rint=0.33
    #specify enclosure boundary
        lb = np.zeros((1,N))
        rb = np.zeros((1,N))
        ri = np.zeros((1,N))
        for j in range(N):
            lb[0,j] = Xmin[0,j]*rint
            rb[0,j] = Xmax[0,j]*rint
            ri[0,j] = rb[0,j]-lb[0,j]
        
#        print 'Left bound:', lb
#        print 'Right Bound:', rb
#        print 'Interval:', ri

        yn = np.zeros((k,1))
    #yn[:] = Y[:] - Y[kq[0]]
        yn[:] = Y[:]
        
       
#        print kq, xn[0,0:N]
# verify distribution of data to see if there is a mode 

        l=0
        xloc = np.zeros((k,N))
        
        #create xlocn,ycoln to store selected records and graduation rate
        xlocn = np.zeros((k,N))
        ylocn = np.zeros((k))
        xv = np.zeros((N))
        kn = 0
        exclude = {kq}
        #for xv in xn:
        irange = range(len(xn))
        irange.pop(kq)
        
        #select all the records in ri[0,j]
        for indx in irange:
            xv = xn[indx,:] 
            if ((lb[0,0] < xv[0] < rb[0,0] ) & (lb[0,1] < xv[1] < rb[0,1]) & (lb[0,2] < xv[2] < rb[0,2])):
                xlocn[kn,:] = xv
                ylocn[kn] = yn[indx,0] 
                kn = kn + 1
        
        kn=kn-1        
#        print 'Module , Samples kn:',imodindx, kn
        nsamp[imodindx] = kn
#        print 'samples:',kn
        
          ##QP  Theorem 4 
    ## | f(x) - f(z) | <=  2M 
         P = matrix(0.0, (kn+1,kn+1))
            for i in range(kn):
                P[i,i] = sigma
    #        
            M = 0.5
            P[kn,kn] = 4*M*M 
    #    
    ##q = np.zeros((kn+1))
    #        q =  [[0 for ic in xrange (1)] for ir in xrange(kn+1)]
            q = matrix(0.0,(kn+1,1))
    #    
    ##G = np.zeros((2*N,kn+1))
    ##G = [[0 for ic in xrange(kn+1)] for ir in xrange(2*N)]
    #    
            G = matrix(0.0,(2*N, kn+1) ) 
    #    
            for i in range(N):
                for j in range(kn):
                    G[i,j]= xlocn[j,i]/ri[0,i]
    #        
            for i in range(N):
                for j in range(kn):
                    G[N+i,j] = -1.0*xlocn[j,i]/ri[0,i]
    #            
            for i in range(2*N):        
                G[i,kn] = -1.0
    #    
    ##h = np.zeros(kn+1)
    ##h = [[0 for ic in xrange(1)] for ir in xrange(kn+1)]
            h = matrix(0.0,(2*N,1))
    #    
    ## Constraints  GW < h   and Ax = b
    ##A = np.zeros((1,kn+1))
    ##A = [[ 0 for ic in xrange(kn+1)] for ir in xrange(1)]
    #    
            A = matrix(0.0,(1,kn+1)) 
    #    
    ##b = np.zeros((1))
    #    
    ##b = [[0 for ic in xrange(1)] for ir in xrange(1)] 
            b= matrix(0.0,(1,1))
    #    
            for i in range(kn):
                A[0,i]= 1.0
    #    
    ##A[0][kn+1] = 0.0
            b[0,0] = 1.0
    #    
            sol = solvers.qp(P,q,G,h,A,b, ) 
    #    
    ##print (sol['x'])
            #print 'obj :' 
            #print (sol['primal objective'])
            obj[imodindx] = np.sqrt(sol['primal objective'])
    #        
    ## test solution 
            xo = sol['x']
    #    
            fval = 0.0
            for i in range(kn):
                fval = fval + xo[i]*ylocn[i]
    ##        print 'fval=',fval    
    ##        print xo
    #
            fest[imodindx] = fval    
            ftrue[imodindx] = Ys[kq] 
            err[imodindx] = (fval- Ys[kq])
            fmod[imodindx,:] = fnames[:] 
            fqval[imodindx,:] = querval[:]
    #        
    #print imodindx     
    #  
    fout0.write('%d \n' %(kq))
    fout1.write('%d \n' %(kq))
    
 #   fout1.write('%d \n' %(kq))
   # fout1.write('%d \n' %(kq))
    
    nout  =0
    icount = 0
    for imod in range(imodindx+1): 
        i = imod
        ftrue[i]  = Ys[kq]
        # LSE 
        if (nsamp[i] > 0):
        
            c1lse = LSEest[i]-LSEerr[i] 
            c2lse = LSEest[i] + LSEerr[i] 
            
            c1lse0 = LSEest[i]-1.645*LSEerr[i] 
            c2lse0 = LSEest[i] + 1.645*LSEerr[i] 
            
            sigma2 = LSEerr[i]**2
            
            if (c1lse > 0.5):
                #  estimate - sigma - 0.5 
#                zc1 = (c1lse-0.5)/LSEerr[i]  
                zc1 = np.sqrt((LSEest[i] - 0.5)**2 - sigma2)/LSEerr[i]
                pc1 = scipy.stats.norm.sf(zc1) 
                fout1.write('%d  %d  %1.0f   %0.2f   %0.2f  %0.2f %s %0.3f \n' %(i,nsamp[i],
                        ftrue[i],LSEest[i],LSEerr[i],c1lse,'>',pc1))     
            
            if (c2lse < 0.5):
                # 0.5 - estimate - sigma 
               # zc2 = (0.5-c2lse)/LSEerr[i] 
                zc2 = np.sqrt(( 0.5- LSEest[i])**2 - sigma2)/LSEerr[i] 
                pc2 = scipy.stats.norm.sf(zc2)
                fout1.write('%d  %d   %1.0f   %0.2f   %0.2f   %0.2f %s %0.3f \n' %(i,nsamp[i],
                    ftrue[i],LSEest[i],LSEerr[i],c2lse,'<',pc2))  
                    
                      
            if (LSEest[i] >= 0.5  and c1lse0 <= 0.5):
                pval = 9.99
            if (LSEest[i] < 0.5 and c2lse0 >= 0.5):
                pval = 0.00  
            
            if ( (c1lse <= 0.5) and ( c2lse >= 0.5) ):  
                fout1.write('%d  %d   %1.0f   %0.2f   %0.2f   %0.2f %s %0.3f \n' %(i,nsamp[i],ftrue[i],
                    LSEest[i],LSEerr[i],0.0,'=',9.99))
        
       
            c1 = fest[i]-obj[i] 
            c2 = fest[i] + obj[i] 
            
            # 95 % confidence interval
            c10 = fest[i] - 1.645* obj[i]
            c20 = fest[i] + 1.645*obj[i] 
            
            s2 = obj[i]*obj[i] 
            
            if (c1 >= 0.5):
#                zc1 = (c1-0.5)/obj[i]  
                zc1 = np.sqrt((fest[i]-0.5)**2 - s2)/obj[i] 
                pc1 = scipy.stats.norm.sf(zc1) 
                fout0.write('%d  %d  %1.0f   %0.2f   %0.2f  %0.2f %s %0.3f \n' %(i,nsamp[i],
            ftrue[i],fest[i],obj[i],c1,'>',pc1))
            
            #print('%d  %d   %1.0f   %0.2f   %0.2f   %0.2f \n' %(i,nsamp[i],ftrue[i],
            #fest[i],obj[i],c1))
            
            if (c2 <= 0.5):
             #   zc2 = (0.5-c2)/obj[i] 
                zc2 = np.sqrt((0.5-fest[i])**2 - s2)/obj[i] 
                pc2 = scipy.stats.norm.sf(zc2)
                fout0.write('%d  %d   %1.0f   %0.2f   %0.2f   %0.2f %s %0.3f \n' %(i,nsamp[i],
                ftrue[i],fest[i],obj[i],c2,'<',pc2))
            #print('%d  %d   %1.0f   %0.2f   %0.2f   %0.2f \n' %(i,nsamp[i],
            #ftrue[i],fest[i],obj[i],c2))
            
            if (fest[i] >= 0.5  and c10 <= 0.5):
                pval = 9.99
            if (fest[i] < 0.5 and c20 >= 0.5):
                pval = 0.00
            
            if ( (c1 < 0.5) and ( c2 > 0.5) ):  
                fout0.write('%d  %d   %1.0f   %0.2f   %0.2f   %0.2f %s %0.3f \n' %(i,nsamp[i],ftrue[i],
                fest[i],obj[i],0.0,'=',9.99))
                
                
                
        else:
                fout1.write('%d  %d   %1.0f   %0.2f   %0.2f   %0.2f %s %0.3f \n' %(i,nsamp[i],ftrue[i],
                    LSEest[i],LSEerr[i],0.0,'=',8.88))
                fout0.write('%d  %d   %1.0f   %0.2f   %0.2f   %0.2f %s %0.3f \n' %(i,nsamp[i],ftrue[i],
                fest[i],obj[i],0.0,'=',8.88))    
 

fout0.close
fout1.close
